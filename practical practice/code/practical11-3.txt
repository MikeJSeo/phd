model{
for(i in 1:ns){ 
	w[i,1] <-0
	delta1[i,t[i,1]]<-0
	u[i] ~ dnorm(0,.001)                                         
	
	for (k in 1:na[i])  { 
		se[i,t[i,k]]<-sd[i,t[i,k]]/sqrt(n[i,t[i,k]])
		varr[i,t[i,k]]<-se[i,t[i,k]]*se[i,t[i,k]]
		prec[i,t[i,k]]<-1/varr[i,t[i,k]]
		#normal likelihood
		y[i,t[i,k]]~dnorm(phi[i,t[i,k]],prec[i,t[i,k]])
		phi[i,t[i,k]]<-(u[i]+delta1[i,t[i,k]])*pooled.sd[i]				
		#calculate the pooled SD
		nom1[i,k]<-n[i,t[i,k]]*sd[i,t[i,k]]*sd[i,t[i,k]] #nominator for the pooled sd
	}
	ss[i]<-sum(n[i,1:nt])-nt+na[i] #total sample size in a study
	nom[i]<-sum(nom1[i,1:na[i]])#nominator for the pooled  sd
	pooled.sd[i]<-sqrt(nom[i]/(ss[i]-na[i]))# pooled  sd
				
	for (k in 2:na[i]) {
		smd[i,k]<-(y[i,t[i,k]]-y[i,t[i,1]])/pooled.sd[i]
		varSMD[i,k]<-1/n[i,t[i,k]]+1/n[i,t[i,1]]+pow(smd[i,k],2)/(2*(n[i,t[i,k]]+n[i,t[i,1]]-2))
		seSMD[i,k]<-sqrt(varSMD[i,k])
		I[i,k]<-(sp[i,t[i,k]]-sp[i,t[i,1]])
	}	
		
	for (k in 2:na[i]) {
		delta1[i,t[i,k]]<-delta[i,t[i,k]] + beta*I[i,k] #varSMD[i,k]*PL[i] #I[i,k]
		delta[i,t[i,k]] ~ dnorm(md[i,t[i,k]],taud[i,t[i,k]])             # trial-specific LOR distributions
		md[i,t[i,k]] <-  d[t[i,k]] - d[t[i,1]]  + sw[i,k]                   # mean of LOR distributions
		taud[i,t[i,k]] <- inv.tau2 *2*(k-1)/k                                    #precision of LOR distributions
		w[i,k] <- (delta[i,t[i,k]]  - d[t[i,k]] + d[t[i,1]])          #adjustment, multi-arm RCTs
		sw[i,k] <-sum(w[i,1:(k-1)])/(k-1) }                 # cumulative adjustment for multi-arm trials
	}   
	beta ~ dnorm(0,0.01)
	d[ref]<-0
	for (k in 1:(ref-1)){d[k] ~ dnorm(0,.01) }         
	for (k in (ref+1):nt){d[k] ~ dnorm(0,.01) }         

	tau~dnorm(0,1)I(0,)    #  vague prior for random effects standard deviation 
	inv.tau2<-1/pow(tau,2)

# Collection of results###########
# pairwise SMDs
# for all comparisons
for (c in 1:nt) {  for (k in 1:nt)  { SMD[c,k] <- d[c] - d[k]  }  }
#compared to baseline
for (c in 1:nt) {  SMD.ref[c] <-d[c] - d[ref] } 
#predictions
for (c in 1:nt) { X[c]<-d[c] - d[ref]
predSMD.ref[c] ~dnorm( X[c],tau)} 


#Ranking of treatments#
order <- rank(d[])
for(k in 1:nt) {
# this is when the outcome is negative - change to order[k] <- t+1-rank(d[]) when the outcome is positive
most.effective[k] <- equals(order[k],1)
for(j in 1:nt) {effectiveness[k,j] <- equals(order[k],j)
cumeffectiveness[k,j] <- sum(effectiveness[k,1:j])}}

##SUCRAS
for(k in 1:nt) {
SUCRA[k] <- sum(cumeffectiveness[k,1:(nt-1)]) /(nt-1)
}}