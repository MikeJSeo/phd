calc_mse(val_treat, 1))
}
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid), data = data)
values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid), data = data)
values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
glmm_full_store_mse[i,] <- find_performance(values, correct_em_values, correct_em)
find_performance <- function(val, correct_values, correct_em){
val_without_treat <- val[-length(val)]
val_treat <- val[length(val)]
c(calc_mse(val_without_treat[correct_em != 1], correct_values[correct_em != 1]),
calc_mse(val_without_treat[correct_em == 1], correct_values[correct_em == 1]),
calc_mse(val_treat, 1))
}
glmm_full_store_mse[i,] <- find_performance(values, correct_em_values, correct_em)
find_performance(values, correct_em_values, correct_em)
values
(0.12723557 - 0.1)^2
val_without_treat[correct_em != 1]
values[-3]
values[c(-3, -6)]
(values[c(-3, -6)] - c(0.1, 0.1, 0.1, 0.1))^2
(values[c(-3, -6)] - rep(0,4))^2
mean((values[c(-3, -6)] - rep(0,4))^2)
(values[6] - 1)^2
summary(m1)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
mean_values
sd_values
find_performance2 <- function(val, correct_values, correct_em){
val_without_treat <- val[-length(val)]
true_em_value <- val_without_treat[correct_em == 1]
val_treat <- val[length(val)]
c(mean(true_em_value[true_em_value != 0]),
val_treat)
}
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
find_performance2(sd_values, correct_em)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
glmm_null_store_mse <- matrix(NA, nrow =
mse_null <- sapply(col_labels[-c(1:10)], function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
glmm_null_store_mse[i,] <- find_performance2(mse_null, correct_em_values, correct_em)
glmm_full_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- matrix(NA, nrow = niter, ncol = 2)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
mse_null <- sapply(col_labels[-c(1:10)], function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
glmm_null_store_mse[i,] <- find_performance2(mse_null, correct_em_values, correct_em)
find_performance2(sd_values, correct_em)
correct_em
find_performance2 <- function(val, correct_em){
val_without_treat <- val[-length(val)]
true_em_value <- val_without_treat[correct_em == 1]
val_treat <- val[length(val)]
c(mean(true_em_value[true_em_value != 0]),
val_treat)
}
find_performance2 <- function(val, correct_em){
val_without_treat <- val[-length(val)]
true_em_value <- val_without_treat[correct_em == 1]
val_treat <- val[length(val)]
c(mean(true_em_value[true_em_value != 0]),
val_treat)
}
find_performance2(sd_values, correct_em)
sd_values
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
mean_values
sd_values
find_performance(mean_values, correct_em_values, correct_em)
(1.041672 - 1)^2
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
find_performance2(sd_values, correct_em)
correct_em
sd_values[correct_em ==1]
glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_null_store_sd <- rep(NA, niter)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i] <- find_performance2(sd_values, correct_em)
}
glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 2)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean)
apply(glmm_null_store_mse, 2, mean)
apply(glmm_null_store_sd, 2, mean)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lm(y ~ (X1 + X2 + X3 + X4 + X5)*treat, data = data)
s1 <- step(m1, scope=list(lower=~treat))
summary(s1)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels
sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
sd_values
find_performance2(mean_values, correct_em_values, correct_em)
find_performance(mean_values, correct_em_values, correct_em)
mean_values
glmm_full_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- matrix(NA, nrow = niter, ncol = 2)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean)
glmm_full_store_sd_mean
p.fac = rep(1, 11)
p.fac[c(6)] = 0 #No shrinkage for treatment effect
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data$studyid <- NULL
cvfit = cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
glmnet_fit <- coef(cvfit, s = "lambda.min")
glmnet_fit
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(glmnet_fit)[glmnet_fit[,1] != 0], glmnet_fit[x,1], 0))
mean_values
find_performance(mean_values, correct_em_values, correct_em)
step_store_mse <- matrix(NA, nrow = niter, ncol = 3)
step_store_sd <- matrix(NA, nrow = niter, ncol = 2)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lm(y ~ (X1 + X2 + X3 + X4 + X5)*treat, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
glmnet_store_mse <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data$studyid <- NULL
cvfit = cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
glmnet_fit <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(glmnet_fit)[glmnet_fit[,1] != 0], glmnet_fit[x,1], 0))
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
p.fac <- rep(1, Ncovariate*2 + 1)
str(data)
col_labels*2 - 1
length(col_labels)*2 - 1
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
p.fac
glmnet_store_mse <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data$studyid <- NULL
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
cvfit = cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
glmnet_fit <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(glmnet_fit)[glmnet_fit[,1] != 0], glmnet_fit[x,1], 0))
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmnet_store_mse
find_performance(mean_values, correct_em_values, correct_em)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
str(data)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = binomial(link = "logit"))
help("glmmLasso")
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data$studyid <- NULL
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
cvfit <- cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
aa <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
aa <- summary(cv.fit)$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
glmmLasso_store_mse <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
aa <- summary(cv.fit)$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(aa)$coefficients[x,"Estimate"], 0))
col_labels_glmmLasso
aa
aa
sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit)$coefficients[x,"Estimate"], 0))
summary(cv.fit)
str(data)
cv.fit
summary(cv.fit)
set.seed(2)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
summary(cv.fit)
summary(cv.fit)
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 1000,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 1000,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 10,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 10,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 1000,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
str(data)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data$studyid <- NULL
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
cvfit <- cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
aa <- coef(cvfit, s = "lambda.min")
aa
aa <- coef(cvfit, s = "lambda.1se")
aa
dim(data)[2]
dim(data)[2]-3
c(NA, 1:((dim(data)[2] - 3)), NA))
c(NA, 1:((dim(data)[2] - 3)), NA)
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:10, NA)))
data
data_glmmLasso <- model.matrix(y~ -1 + (X1 + X2 + X3 + X4 + X5)*treat, data = data)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data_glmmLasso <- model.matrix(y~ -1 + (X1 + X2 + X3 + X4 + X5)*treat, data = data)
data_glmmLasso <- cbind(y = data$y, data_glmmLasso = data_glmmLasso, studyid = data$studyid)
datastr(data_glmmLasso)
str(data_glmmLasso)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data_glmmLasso <- model.matrix(y~ -1 + (X1 + X2 + X3 + X4 + X5)*treat, data = data)
data_glmmLasso <- cbind(y = data$y, data_glmmLasso = data_glmmLasso, studyid = data$studyid)
colnames(data_glmmLasso) <- gsub(":", "_", colnames(data_glmmLasso))
data_glmmLasso <- as.data.frame(data_glmmLasso)
str(data)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:10, NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 10,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:10, NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 30,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:10, NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 1000,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:10, NA)))
dim(data)
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 1000,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 10,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 50,
data = data,
final.re = FALSE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 50,
data = data,
final.re = TRUE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 50,
data = data,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(200, 0, by = -5), family = gaussian(link="identity"))
summary(cv.fit)
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = TRUE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
glmmLasso(form.fixed, rnd = form.rnd,
family = gaussian(link = "identity"),
lambda = 100,
data = data,
final.re = TRUE,
control = list(index = c(NA, 1:((dim(data)[2] - 3)), NA)))
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
summary(cv.fit)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- as.formula(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat +  treat)
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
aa <- summary(cv.fit)$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit)$coefficients[x,"Estimate"], 0))
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
str(data)
dim(data)[2]
(dim(data)[2] - 3)/2
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = cbind(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10),
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = cbind(X1, X2, X3, X4, X5),
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
data_jags
str(data_jags)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = cbind(X1, X2, X3, X4, X5),
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
getwd()
#setwd("C:/Users/ms19g661/Desktop")
setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
#setwd("~/GitHub/phd/varselect")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = cbind(X1, X2, X3, X4, X5),
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
getwd()
#setwd("C:/Users/ms19g661/Desktop")
setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
#setwd("~/GitHub/phd/varselect")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
getwd()
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
getwd()
source("helpful.functions.R")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
source("helpful.functions.R")
getwd()
source("helpful.functions.R")
source("helpful.functions.R")
source("helpful.functions.R")
source("helpful.functions.R")
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
getwd()
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
getwd()
ls()
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 3, n.adapt = 100, n.update = 100, n.iter = 2000)
