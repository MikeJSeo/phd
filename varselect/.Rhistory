# Setting directory
#setwd("C:/Users/ms19g661/Desktop")
setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
#setwd("~/GitHub/phd/varselect")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 3
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
setwd("C:/Users/ms19g661/Desktop")
#setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
setwd("~/GitHub/phd/varselect")
#setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 3
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
library(MASS) # Used for data simulation
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(dclone) # for parallel processing of JAGS code
library(knitr) # for tables
setwd("C:/Users/ms19g661/Desktop")
#setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
setwd("~/GitHub/phd/varselect")
#setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 3
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
niter <- 1000 #number of simulation to run
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 2)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
step_store_mse <- matrix(NA, nrow = niter, ncol = 3)
step_store_sd <- matrix(NA, nrow = niter, ncol = 2)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lm(y ~ (X1 + X2 + X3 + X4 + X5)*treat, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
i = 1
step_store_mse <- matrix(NA, nrow = niter, ncol = 3)
step_store_sd <- matrix(NA, nrow = niter, ncol = 2)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lm(y ~ (X1 + X2 + X3 + X4 + X5)*treat, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em)
find_performance2(sd_values, correct_em)
summary(s1)
glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 2)
set.seed(i)
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = c(1, 3, 4), pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
Nstudies <- 5
Ncovariate <- 5
continuous.cov <- c(1, 3, 4)
pf <- c(1,2,3)
em <- 3
b1 <- c(0.1, 0.5, 0.1)
b2 <- 0.1
glmm_null_formula <- as.formula("y ~ studyid + treat + (-1 + treat|studyid)")
i = 1
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
summary(m1)
continuous.cov
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
continuous.indicator
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
mean_values
data <-generate.simulation(Nstudies = 5, Ncovariate = 5, continuous.cov = continuous.cov, pf = c(1,2,3), em = 3, b1 = c(0.1, 0.5, 0.1), b2 = 0.1)
m1 <- lmer(y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid), data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
mean_values
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
sd_values
val <- sd_values
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
true_em_value_binary
true_em_value_continuous
find_performance2 <- function(val, correct_em, continuous.cov){
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
c(ifelse(length(true_em_value_continuous) == 0, NA, mean(true_em_value)),
ifelse(length(true_em_value_binary) == 0, NA, mean(true_em_value)),
val_treat)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
find_performance2(sd_values, correct_em, continuous.cov)
glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
glmm_null_store_sd_mean
glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
glmm_full_formula <- as.formula("y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid)")
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_full_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
find_performance2 <- function(val, correct_em, continuous.cov){
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
c(ifelse(length(true_em_value_continuous) == 0, NA, mean(true_em_value_continuous)),
ifelse(length(true_em_value_binary) == 0, NA, mean(true_em_value_binary)),
val_treat)
}
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
find_performance(mean_values, correct_em_values, correct_em)
find_performance2(sd_values, correct_em)
sd_values
find_performance2 <- function(val, correct_em, continuous.cov){
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
c(ifelse(length(true_em_value_continuous) == 0, NA, mean(true_em_value_continuous)),
ifelse(length(true_em_value_binary) == 0, NA, mean(true_em_value_binary)),
val_treat)
}
find_performance2(sd_values, correct_em)
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
run.simulation <- function(){
glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
print("finished glmm_null")
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_full_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
}
help(warning)
run.simulation <- function(){
glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_null_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_null_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
warning("finished glmm_null")
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_full_formula, data = data)
mean_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels_glmm, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em)
}
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
}
run.simulation()
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
data$studyid <- NULL
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
cvfit <- cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac)
aa <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
step_store_sd <- glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
aa <- summary(cv.fit)$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit)$coefficients[x,"Estimate"], 0))
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
step_store_sd <- glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
help(glmer)
glmm_family <- gaussian
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- glmer(glmm_null_formula, data = data, family = glmm_family)
m1 <- lmer(glmm_null_formula, data = data, family = family)
help(cv.glmnet)
model.type <- "gaussian"
cvfit <- cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac, family = model.type)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
data$studyid <- NULL
p.fac <- rep(1, length(col_labels)*2 - 1)
p.fac[length(col_labels)] <- 0
cvfit <- cv.glmnet(as.matrix(data[,-1]), as.matrix(data[1]), penalty.factor = p.fac, family = model.type)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = model.type)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
#gaussian(link="identity")
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = model.type)
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
aa <- summary(cv.fit)$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit)$coefficients[x,"Estimate"], 0))
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_null_store_mse_mean <- apply(glmm_null_store_mse, 2, mean)
glmm_null_store_sd_mean <- apply(glmm_null_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
step_store_mse_mean <- apply(step_store_mse, 2, mean)
step_store_sd_mean <- apply(step_store_sd, 2, mean, na.rm = TRUE)
glmnet_store_mse_mean <- apply(glmnet_store_mse, 2, mean)
glmmLasso_store_mse_mean <- apply(glmmLasso_store_mse, 2, mean)
result_matrix_mse <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse")
rownames(result_matrix_mse) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_mse[1,] <- glmm_null_store_mse_mean
result_matrix_mse[2,] <- glmm_full_store_mse_mean
result_matrix_mse[3,] <- step_store_mse_mean
result_matrix_mse[4,] <- glmnet_store_mse_mean
result_matrix_mse[5,] <- glmmLasso_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_sd) <- c("continuous effect modifier se", "binary effect modifier se","treatment se")
rownames(result_matrix_sd) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_sd[1,] <- glmm_null_store_sd_mean
result_matrix_sd[2,] <- glmm_full_store_sd_mean
result_matrix_sd[3,] <- step_store_sd_mean
result_matrix_sd[4,] <- glmnet_store_sd_mean
result_matrix_sd[5,] <- glmmLasso_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
result_matrix_mse <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse")
rownames(result_matrix_mse) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_mse[1,] <- glmm_null_store_mse_mean
result_matrix_mse[2,] <- glmm_full_store_mse_mean
result_matrix_mse[3,] <- step_store_mse_mean
result_matrix_mse[4,] <- glmnet_store_mse_mean
result_matrix_mse[5,] <- glmmLasso_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_sd) <- c("continuous effect modifier se", "binary effect modifier se","treatment se")
rownames(result_matrix_sd) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_sd[1,] <- glmm_null_store_sd_mean
result_matrix_sd[2,] <- glmm_full_store_sd_mean
result_matrix_sd[3,] <- step_store_sd_mean
#result_matrix_sd[4,] <- glmnet_store_sd_mean
#result_matrix_sd[5,] <- glmmLasso_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
result_matrix_mse <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse")
rownames(result_matrix_mse) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_mse[1,] <- glmm_null_store_mse_mean
result_matrix_mse[2,] <- glmm_full_store_mse_mean
result_matrix_mse[3,] <- step_store_mse_mean
result_matrix_mse[4,] <- glmnet_store_mse_mean
result_matrix_mse[5,] <- glmmLasso_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_sd) <- c("continuous EM se", "binary EM se","treatment se")
rownames(result_matrix_sd) <-  c("glmm null", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_sd[1,] <- glmm_null_store_sd_mean
result_matrix_sd[2,] <- glmm_full_store_sd_mean
result_matrix_sd[3,] <- step_store_sd_mean
#result_matrix_sd[4,] <- glmnet_store_sd_mean
#result_matrix_sd[5,] <- glmmLasso_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
