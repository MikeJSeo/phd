library("dclone")
help(dclone)
library(rjags)
install.packages("rjags")
help(step)
library(glmmLasso)
help(glmmLasso)
citation()
citation(lmer)
citation("lmer")
install.packages("lmer")
citation("glmnet")
help(cv.fit)
library(glmnet)
help(cv.fit)
help(cv.glmnet)
citation("glmnet")
help(glmmLasso)
library(glmmLasso)
help("glmmLasso")
library(rjags)
help(jags.model)
modelBayesLasso<- function(){
########## IPD-MA model
for (i in 1:Np){
y[i] ~ dbern(p[i])
logit(p[i]) <- alpha[studyid[i]] + inprod(beta[], X[i,]) +
delta[studyid[i],treat[i]] + (1 - equals(treat[i],1)) * inprod(g[], X[i,])
}
#####treatment effect
for(i in 1:Nstudies){
delta[i,1] <- 0
delta[i,2] ~ dnorm(d[2], tauDelta)
}
## prior distribution for heterogeneity of the treatment effect
tauDelta <- pow(sdDelta, -2)
sdDelta ~ dunif(0, 5)
## prior distribution for treatment effect
d[1] <- 0
d[2] ~ dnorm(0, 0.001)
for (i in 1:Nstudies){
alpha[i] ~ dnorm(0, 0.001)
}
#lambda ~ dgamma(0.001, 0.001)
lambda ~ dgamma(2, 0.1)
for(i in 1:Ncovariate){
beta[i] ~ ddexp(0, lambda)
#Ind1[i] <- step(abs(beta[i]) - 0.05)
}
for(i in 1:Ncovariate){
g[i] ~ ddexp(0, lambda)
#Ind2[i] <- step(abs(g[i]) - 0.05)
}
}
install.packages("R2jags")
citation(stats)
library(stats)
cite(stats)
cite("stats")
cite("glmenet")
citation(package = "stats")
toBibtex(x)
x <- citation(package = "stats")
toBibtex(x)
citation(package = "lmer")
citation(package = "lme4")
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(200, 300), model.type = "gaussian"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -3, -2)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
# standardize X: binary and continuous variables in same scale
X <- apply(X, 2, scale)
meany <- alpha[studyid] + delta[studyid] * treat + X[,pf, drop = FALSE] %*% b1 + X[,em, drop = FALSE] %*% b2 * treat
sigmay <- 0.5
py <- expit(meany)
if(model.type == "gaussian"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model.type == "binary"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
library(MASS) # Used for data simulation
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(dclone) # for parallel processing of JAGS code
library(knitr) # for tables
library(nlme) # for initial values for glmmLasso
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("run.simulation.functions.R")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 2
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
# number of simulation to run
niter <- 100
setwd("~/GitHub/phd/varselect")
source("run.simulation.functions.R")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 2
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
# number of simulation to run
niter <- 100
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
Nstudies <- 5
Ncovariate <- 5
continuous.cov <- c(1, 3, 4)
pf <- c(1,2,3)
em <- 3
b1 <- c(0.1, 0.5, 0.1)
b2 <- 0.1
glmm_null_formula <- as.formula("y ~ studyid + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid)")
step_full_formula <-  as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
model.type = "binary"
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmmLasso_store_sd <- glmnet_store_sd <- step_store_sd <- glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_null_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_null_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
i = 1
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_null_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_null_formula, data = data, family = binomial(link = "logit"))
}
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
Nstudies <- 5
Ncovariate <- 5
continuous.cov <- c(1, 3, 4)
pf <- c(1,2,3)
em <- 3
b1 <- c(0.1, 0.5, 0.1)
b2 <- 0.1
glmm_null_formula <- as.formula("y ~ studyid + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid)")
step_full_formula <-  as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
model.type = "binary"
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -3, -2)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
i =
1
X
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -3, -2)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(200, 300), model.type = "gaussian"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -3, -2)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
# standardize X: binary and continuous variables in same scale
X <- apply(X, 2, scale)
meany <- alpha[studyid] + delta[studyid] * treat + X[,pf, drop = FALSE] %*% b1 + X[,em, drop = FALSE] %*% b2 * treat
sigmay <- 0.5
py <- expit(meany)
if(model.type == "gaussian"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model.type == "binary"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
sampleSize
ampleSize = c(200, 300)
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
sampleSize = c(200, 300)
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(200, 300), model.type = "gaussian"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -3, -2)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
# standardize X: binary and continuous variables in same scale
X <- apply(X, 2, scale)
meany <- alpha[studyid] + delta[studyid] * treat + X[,pf, drop = FALSE] %*% b1 + X[,em, drop = FALSE] %*% b2 * treat
sigmay <- 0.5
py <- expit(meany)
if(model.type == "gaussian"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model.type == "binary"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#load/save everything else from/to github
#setwd("~/GitHub/phd/varselect")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("run.simulation.functions.R")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 2
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
# number of simulation to run
niter <- 100
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
Nstudies <- 5
Ncovariate <- 5
continuous.cov <- c(1, 3, 4)
pf <- c(1,2,3)
em <- 3
b1 <- c(0.1, 0.5, 0.1)
b2 <- 0.1
glmm_null_formula <- as.formula("y ~ studyid + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid)")
step_full_formula <-  as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
model.type = "gaussian"
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
