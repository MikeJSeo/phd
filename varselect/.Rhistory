samples2 <- lapply(samples, function(x){ x[,c(TRUE, FALSE, FALSE)]})
find.max.gelman
lapply(samples2, function(x) { x[,colSums(abs(x)) != 0] })
pars.save <- c("direct","d", "sd", "diff", "prob", "oneminusprob")
mod = rjags::jags.model(textConnection(network$code), data = data, inits = inits, n.chains = n.chains, n.adapt = 0)
adapted <- FALSE
count <- 0
while(!adapted){
adapted <- rjags::adapt(mod, setsize, end.adaptation = FALSE)
count <- count + 1
if(count == 100){
stop("algorithm has not adapted")
}
}
if(class(network) == "network.data"){
conv.save <- if(network$response == "multinomial"){
c("d", "Eta", "sigma_transformed")
} else if(network$response == "binomial" || network$response == "normal"){
c("d", "Eta", "logvar")
}
if(network$type == "fixed"){
conv.save <- conv.save[!conv.save %in% c("logvar", "sigma_transformed")]
}
} else if(class(network) == "contrast.network.data" || class(network) == "ume.network.data"){
conv.save <- pars.save
} else if(class(network) == "nodesplit.network.data"){
conv.save <- c("direct","d", "sd", "diff")
}
samples <- rjags::coda.samples(model = mod, variable.names = pars.save, n.iter = setsize)
varnames <- dimnames(samples[[1]])[[2]]
varnames.split <- sapply(strsplit(varnames, "\\["), '[[', 1)
conv.save.variables <- varnames.split %in% conv.save
max.gelman <- find.max.gelman(samples, conv.save.variables)
print(max.gelman)
check <- max.gelman > conv.limit
mod = rjags::jags.model(textConnection(network$code), data = data, inits = inits, n.chains = n.chains, n.adapt = 0)
adapted <- FALSE
count <- 0
while(!adapted){
adapted <- rjags::adapt(mod, setsize, end.adaptation = FALSE)
count <- count + 1
if(count == 100){
stop("algorithm has not adapted")
}
}
if(class(network) == "network.data"){
conv.save <- if(network$response == "multinomial"){
c("d", "Eta", "sigma_transformed")
} else if(network$response == "binomial" || network$response == "normal"){
c("d", "Eta", "logvar")
}
if(network$type == "fixed"){
conv.save <- conv.save[!conv.save %in% c("logvar", "sigma_transformed")]
}
} else if(class(network) == "contrast.network.data" || class(network) == "ume.network.data"){
conv.save <- pars.save
} else if(class(network) == "nodesplit.network.data"){
conv.save <- c("direct","d", "sd", "diff")
}
samples <- rjags::coda.samples(model = mod, variable.names = pars.save, n.iter = setsize)
varnames <- dimnames(samples[[1]])[[2]]
varnames.split <- sapply(strsplit(varnames, "\\["), '[[', 1)
conv.save.variables <- varnames.split %in% conv.save
max.gelman <- find.max.gelman(samples, conv.save.variables)
print(max.gelman)
check <- max.gelman > conv.limit
devtools::install_github("MikeJSeo/bnma")
library(bnma)
nodesplit.network.run()
nodesplit.network.run
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)), type = "fixed")
result <- nodesplit.network.run(network)
summary(result)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
cat(network$code)
network <- with(blocker, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial")
})
cat(network$code)
devtools::install_github("MikeJSeo/bnma")
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
devtools::install_github("MikeJSeo/bnma")
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), type = "fixed"))
result <- nodesplit.network.run(network)
summary(result)
cat(network$code)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), type = "fixed"))
network$type
cat(network$code)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), type = "fixed"))
result <- nodesplit.network.run(network)
cat(network$code)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), type = "fixed"))
result <- nodesplit.network.run(network)
summary(result)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), type = "fixed"))
result <- nodesplit.network.run(network)
summary(result)
library(bnma)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9)))
result <- nodesplit.network.run(network)
summary(result)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, N, response = "binomial", pair = c(3,9), dic = FALSE))
result <- nodesplit.network.run(network)
summary(result)
result$pars.save
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random", dic = FALSE)
})
result <- ume.network.run(network)
summary(result)
network <- with(smoking, {
ume.network.data(Outcomes, Study, Treat, N = N, response = "binomial", type = "random")
})
result <- ume.network.run(network)
summary(result)
#' parkinsons
#' network <- with(parkinsons,{
#'  network.data(Outcomes, Study, Treat, SE = SE, response = "normal")
#' })
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(parkinsons,{
network.data(Outcomes, Study, Treat, SE = SE, response = "normal")
})
network$Treat.order
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE)
result <- nodesplit.network.run(network)
network <- with(thrombolytic, nodesplit.network.data(Outcomes, Study, Treat, SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
parkinsons
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
cat(network$code)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
library(bnma)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
cat(network$code)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
cat(network$code)
network$t
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = FALSE))
result <- nodesplit.network.run(network)
summary(result)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = FALSE, extra.pars = "theta"))
result <- nodesplit.network.run(network)
help("nodesplit.network.data")
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = FALSE))
help(nodesplit.network.run)
nodesplit.network.run(network, extra.pars.save = "theta")
result <- nodesplit.network.run(network, extra.pars.save = "theta")
summary(result)
summary(result, extra.pars = "theta")
class(network)
network$t[i,j]
network$t[2,2]
devtools::install_github("MikeJSeo/bnma")
library(bnma)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), dic = TRUE))
result <- nodesplit.network.run(network)
summary(result)
network <- with(parkinsons, nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Cabergoline"), type = "fixed", dic = TRUE))
result <- nodesplit.network.run(network)
summary(result)
smoking
statins
smoking
smoking
Parkinsons
parkinsons
draw.network.graph(network)
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
summary(result)
network$Treat.order
network$data
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
summary(result)
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
summary(result)
library(bnma)
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
summary(result)
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network, extra.pars = "theta")
summary(result, extra.pars = "theta")
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
network <- with(parkinsons, {
nodesplit.network.data(Outcomes, Study, Treat, SE = SE, response = "normal", Treat.order = Treat.order, pair = c("Placebo", "Ropinirole"))
})
result <- nodesplit.network.run(network)
summary(result, extra.pars = "theta")
network2 <- with(parkinsons, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, SE = SE, response = "normal", Treat.order = Treat.order))
cat(network2$code)
network <- with(smoking, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", hy.prior = list("dunif", 0, 2)))
library(bnma)
network <- with(smoking, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", hy.prior = list("dunif", 0, 2)))
result <- network.run(network, n.run = 100000)
summary(result)
Outcomes <- c(23, 121, 272, 426, 14, 30, 40, 68, 28, 14, 11, 6, 15, 13, 42, 21, 53, 10, 12, 36, 61, 3, 1, 17, 15)
N <- c(295, 590, 2016, 2025, 150, 146, 314, 313, 79, 40, 52, 17, 65, 65, 84, 234, 231, 48, 44, 264, 263, 46, 43, 106, 108)
Study <- c("COMPARE-ACUTE", "COMPARE-ACUTE", "COMPLETE", "COMPLETE", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "Ghani et al", "Ghani et al", "HELP AMI", "HELP AMI", "Politi et al", "Politi et al", "Politi et al", "PRAMI", "PRAMI", "PRIMA", "PRIMA", "SMILE", "SMILE", "Tarasov RS et al", "Tarasov RS et al", "Prague 13", "Prague 13")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "MV-Staged", "COI")
fup <- c(12, 36, 12, 27, 36, 12, 30, 23, 6, 12, 6, 38)
MACE_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
set.seed(1)
network <- with(MACE_data, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", Treat.order =  c("COI", "MV-Index", "MV-Staged"), covariate = fup, covariate.model = "independent", rank.preference = "lower"))
summary(network)
smoking
network
network$data
str(network)
network$data
network$Treat.order
Outcomes <- c(11, 6, 10, 12, 15, 13, 42, 28, 14, 21, 53, 3, 1, 14, 30, 40, 68, 17, 15, 23, 121, 36, 61, 272, 426)
N <- c(52, 17, 48, 44, 65, 65, 84, 79, 40, 234, 231, 46, 43, 150, 146, 314, 313, 106, 108, 295, 590, 264, 263, 2016, 2025)
Study <- c("HELP AMI", "HELP AMI", "PRIMA", "PRIMA", "Politi et al", "Politi et al", "Politi et al", "Ghani et al", "Ghani et al", "PRAMI", "PRAMI", "Tarasov RS et al", "Tarasov RS et al", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "PRAGUE 13", "PRAGUE 13", "COMPARE-ACUTE", "COMPARE-ACUTE", "SMILE", "SMILE", "COMPLETE", "COMPLETE")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged")
fup <- c(12, 6, 30, 36, 23, 6, 12, 27, 38, 12, 12, 36)
MACE_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
length(Outcomes)
lneght(N)
length(N)
length(Study)
length(Treat)
Outcomes <- c(1, 0, 0, 0, 6, 4, 13, 4, 0, 12, 16, 0, 1, 4, 10, 15, 11, 6, 7, 4, 10, 17, 29, 13, 15, 96, 106)
N <- c(52, 17, 48, 44, 65, 65, 84, 79, 40, 234, 231, 46, 43, 150, 146, 314, 313, 106, 108, 295, 590, 264, 263, 215, 213, 2016, 2025)
Study <- c("HELP AMI", "HELP AMI", "PRIMA", "PRIMA", "Politi et al", "Politi et al", "Politi et al", "Ghani et al", "Ghani et al", "PRAMI", "PRAMI", "Tarasov RS et al", "Tarasov RS et al", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "PRAGUE 13", "PRAGUE 13", "COMPARE-ACUTE", "COMPARE-ACUTE", "SMILE", "SMILE", "Zhang et al", "Zhang et al", "COMPLETE", "COMPLETE")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Staged", "COI", "MV-Index", "MV-Staged")
fup <- c(12, 6, 30, 36, 23, 6, 12, 27, 38, 12, 12, 24, 36)
all_cause_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
library(bnma)
network_n1 <- with(all_cause_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "COI")))
result_n1 <- nodesplit.network.run(network_n1)
network_n2 <- with(all_cause_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "MV-Staged")))
result_n2 <- nodesplit.network.run(network_n2)
network_n3 <- with(all_cause_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("COI", "MV-Staged")))
result_n3 <- nodesplit.network.run(network_n3)
summary(result_n1)$p_value
summary(result_n2)$p_value
summary(result_n3)$p_value
installl.packages("selectiveInference")
install.packages("selectiveInference")
library("selectiveInference")
set.seed(43)
n = 50
p = 10
sigma = 1
x = matrix(rnorm(n*p),n,p)
x = scale(x,TRUE,TRUE)
beta = c(3,2,rep(0,p-2))
y = x%*%beta + sigma*rnorm(n)
# first run glmnet
gfit = glmnet(x,y,standardize=FALSE)
# extract coef for a given lambda; note the 1/n factor!
# (and we don't save the intercept term)
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
gfit
summary(gfit)
gfit$beta
gfit$lambda
gfit$beta
beta
out
set.seed(43)
n = 50
p = 10
sigma = 1
x = matrix(rnorm(n*p),n,p)
x = scale(x,TRUE,TRUE)
beta = c(3,2,rep(0,p-2))
y = x%*%beta + sigma*rnorm(n)
# first run glmnet
gfit = glmnet(x,y,standardize=FALSE)
# extract coef for a given lambda; note the 1/n factor!
# (and we don't save the intercept term)
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
coef(gfit, s = lambda)
coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
lfit = lar(x,y,normalize=FALSE)
beta = coef(lfit, s=lambda, mode="lambda")
out2 = fixedLassoInf(x, y, beta, lambda, sigma=sigma)
out2
lfit
coef(lfit)
summary(lfit)
beta
coef
coef(lfit)
coef(lfit, s = 0.8)
coef(lfit, s = 0.8/n)
coef(lfit, s = lambda,mode = "lambda")
help(coef)
set.seed(43)
n = 50
p = 10
sigma = 1
x = matrix(rnorm(n*p),n,p)
x = scale(x,TRUE,TRUE)
beta = c(3,2,rep(0,p-2))
y = x%*%beta + sigma*rnorm(n)
# first run glmnet
gfit = glmnet(x,y,standardize=FALSE)
# extract coef for a given lambda; note the 1/n factor!
# (and we don't save the intercept term)
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
beta
coef(gfit, s = lambda/n)
lambda = 1.5
coef(gfit, s = lambda/n)
coef(gfit, s = 30/n)
fixedLassoInf(x,y,beta,30/n,sigma=sigma)
lambda
30/n
lambda = 0.8
fixedLassoInf(x,y,beta,30/n,sigma=sigma)
fixedLassoInf(x,y,beta,lambda/n,sigma=sigma)
lambda
fixedLassoInf(x,y,beta,30,sigma=sigma)
fixedLassoInf(x,y,beta,15,sigma=sigma)
fixedLassoInf(x,y,beta,1.5,sigma=sigma)
fixedLassoInf(x,y,beta,2.0,sigma=sigma)
fixedLassoInf(x,y,beta, 0.1,sigma=sigma)
fixedLassoInf(x,y,beta, 0.2,sigma=sigma)
set.seed(43)
n = 50
p = 10
sigma = 1
x = matrix(rnorm(n*p),n,p)
x = scale(x,TRUE,TRUE)
beta = c(3,2,rep(0,p-2))
y = x%*%beta + sigma*rnorm(n)
# first run glmnet
gfit = glmnet(x,y,standardize=FALSE)
# extract coef for a given lambda; note the 1/n factor!
# (and we don't save the intercept term)
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
gfit
lambda/n
1.341000 * n
fixedLassoInf(x,y,beta,67.05,sigma=sigma)
lambda = 1.5
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
compute fixed lambda p-values and selection intervalsout = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
> lambda = .8 beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
> out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
lambda = 1.5
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
fixedLassoInf(x,y,beta,lambda,sigma=sigma)
lambda = 2.0
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
fixedLassoInf(x,y,beta,lambda,sigma=sigma)
lambda = 5.0
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
fixedLassoInf(x,y,beta,lambda,sigma=sigma)
lambda = 0.1
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
fixedLassoInf(x,y,beta,lambda,sigma=sigma)
coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
library(readstata13)
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(rjags) # for bayesian models
library(dclone) # for parallel processing of JAGS code
install.packages("dclone")
install.packages("dclone")
install.packges("rjags")
install.packages("rjags")
# load packages needed
library(readstata13)
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(rjags) # for bayesian models
library(dclone) # for parallel processing of JAGS code
library(MASS) # Used for data simulation
library(nlme) # for initial values for glmmLasso
# Setting directory
setwd("C:/Users/ms19g661/Desktop")
#setwd("C:/Users/mike/Desktop")
#stent <- read.dta13("stent.dta")
stent <- read.dta13("1_year_stent_data_21092018.dta")
#load/save everything else from/to github
setwd("~/GitHub/phd/varselect")
#setwd("C:/Users/mike/Desktop/Github/phd/varselect")
# "age", "gender", "diabetes", "stable_cad", "multivessel","ladtreated", "overlap", "m_dia_above_3", "gpi", "new_p2y12", "num_stent"
# gender=1 is men, gender=0 is female
# dropped gpi, new_p2y12
# dropped study 19: too big
study_inclusion <- c(3, 4, 5, 12, 13, 14, 15, 17)
data0 <- stent[stent$trial_name %in% study_inclusion,]
#rename study
for(i in 1:dim(data0)[1]){
data0$trial_name[i] <- which(data0$trial_name[i] == study_inclusion)
}
data0$trial_name <- as.factor(data0$trial_name)
X <-  data0[,c("age", "gender", "diabetes", "stable_cad", "multivessel","ladtreated", "overlap", "m_dia_above_3", "num_stent")]
#recode categorical variables
ii <- sapply(X, is.factor)
X[ii] <- lapply(X[ii], as.character)
X[X == "Yes"] <- 1
X[X == "Male"] <- 1
X[X == "No"] <- 0
X[X == "Female"] <- 0
X[ii] <- lapply(X[ii], as.numeric)
data_stent <- cbind(X, y = data0$a_death_5yr_yn, treat = ifelse(data0$rand == "BMS", 0, 1), studyid = data0$trial_name)
mydata <- na.omit(data_stent)
# scale all variables
mydata[,c("age", "gender", "diabetes", "stable_cad", "multivessel","ladtreated", "overlap", "m_dia_above_3", "num_stent")] <- apply(mydata[,c("age", "gender", "diabetes", "stable_cad", "multivessel","ladtreated", "overlap", "m_dia_above_3", "num_stent")], 2, scale)
X <- mydata[,c("age", "gender", "diabetes", "stable_cad", "multivessel","ladtreated", "overlap", "m_dia_above_3", "num_stent")]
# Total data: 11433 -> complete cases X: 11106
col_labels_stent <- c("age", "gender", "diabetes", "stable_cad", "multivessel", "ladtreated", "overlap", "m_dia_above_3", "num_stent")
col_labels_stent_all <- c("(Intercept)", col_labels_stent, paste0(col_labels_stent, ":treat"), "treat", paste0("as.factor(studyid)", 1:length(unique(mydata$studyid))))
col_labels_stent_glmm <- c("(Intercept)", col_labels_stent, paste0(col_labels_stent, "_treat"), "treat", paste0("as.factor(studyid)", 1:length(unique(mydata$studyid))))
expit <- function(x){
exp(x)/(1+exp(x))
}
# setup for parallel computing
n.cores <- 2
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
data_jags_stent <- with(mydata, {
list(Nstudies = length(unique(studyid)),
Ncovariate = 9,
X = X,
Np = dim(X)[1],
studyid = studyid,
treat = treat + 1,
y = y
)})
model_bayesLASSO <- jags.parfit(cl = cl, data = data_jags_stent, params = c("alpha","beta", "g", "d", "sdDelta", "lambda", "lambda2"), model = "IPD-MA-bayesLASSO-binomial.txt", n.chains = 2, n.adapt = 100, n.update = 1000, n.iter = 10000)
remove(dplyr)
remove.packages("dplyr")
