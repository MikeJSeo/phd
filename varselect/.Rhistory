nk <- floor(N/kk)
Devianz_ma<-matrix(Inf,ncol=kk,nrow=length(lambda))
if(length(lambda) >1 ){
for(j in 1:length(lambda)){
print(paste("Iteration ", j,sep=""))
for (i in 1:kk)
{
if (i < kk){
indi <- ind[(i-1)*nk+(1:nk)]
} else{
indi <- ind[((i-1)*nk+1):N]
}
data_glmmLasso_train <- data_glmmLasso[-indi,]
data_glmmLasso_test <- data_glmmLasso[indi,]
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda[j],
data = data_glmmLasso_train,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
if(class(glm2)!="try-error")
{
y.hat<-predict(glm2,data_glmmLasso_test)
Devianz_ma[j,i]<-sum(family$dev.resids(data_glmmLasso_test$y,y.hat,wt=rep(1,length(y.hat))))
}
}
}
Devianz_vec<-apply(Devianz_ma,1,sum)
opt2<-which.min(Devianz_vec)
#print(Devianz_vec)
#print(paste0("optimal lambda value is ", lambda[opt2]))
lambda.min <- lambda[opt2]
} else{
lambda.min <- lambda
}
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda.min,
data = data_glmmLasso,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
list(glm2 = glm2, lambda.min = lambda.min)
}
cv.glmmLasso <- function(data_glmmLasso, form.fixed = NULL, form.rnd = NULL, lambda = NULL, family = NULL){
N <-dim(data_glmmLasso)[1]
ind<-sample(N,N)
kk<-10 # 5 fold cross-validation
nk <- floor(N/kk)
Devianz_ma<-matrix(Inf,ncol=kk,nrow=length(lambda))
if(length(lambda) >1 ){
for(j in 1:length(lambda)){
print(paste("Iteration ", j,sep=""))
for (i in 1:kk)
{
if (i < kk){
indi <- ind[(i-1)*nk+(1:nk)]
} else{
indi <- ind[((i-1)*nk+1):N]
}
data_glmmLasso_train <- data_glmmLasso[-indi,]
data_glmmLasso_test <- data_glmmLasso[indi,]
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda[j],
data = data_glmmLasso_train,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
if(class(glm2)!="try-error")
{
y.hat<-predict(glm2,data_glmmLasso_test)
Devianz_ma[j,i]<-sum(family$dev.resids(data_glmmLasso_test$y,y.hat,wt=rep(1,length(y.hat))))
}
}
}
Devianz_vec<-apply(Devianz_ma,1,sum)
opt2<-which.min(Devianz_vec)
#print(Devianz_vec)
#print(paste0("optimal lambda value is ", lambda[opt2]))
lambda.min <- lambda[opt2]
} else{
lambda.min <- lambda
}
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda.min,
data = data_glmmLasso,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
list(glm2 = glm2, lambda.min = lambda.min)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
#cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = 10, family = gaussian(link="identity"))
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
cv.fit
i
i = 2
bootstrap_function_glmmLasso  <- function(model_data, ndraws, lambda.min = NULL, model.type = NULL) {
if(is.null(model.type)) stop("model type missing")
coeff_mtx <- matrix(0, nrow = ndraws, ncol = length(col_labels))
for (ii in 1:ndraws) {
bootstrap_ids <- sample(seq(nrow(model_data)), nrow(model_data), replace = TRUE)
bootstrap_data <- model_data[bootstrap_ids,]
if(model.type == "gaussian"){
bootstrap_model <- cv.glmmLasso(bootstrap_data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = lambda.min, family = gaussian(link="identity"), center = FALSE, standardize = FALSE)
}
aa <- summary(bootstrap_model[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
coeff_mtx[ii,] <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(bootstrap_model[[1]])$coefficients[x,"Estimate"], 0))
}
se <- apply(coeff_mtx, 2, sd, na.rm = TRUE)
return(se)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
## code to do cross validation for glmmLasso to get optimal lambda value
cv.glmmLasso <- function(data_glmmLasso, form.fixed = NULL, form.rnd = NULL, lambda = NULL, family = NULL){
N <-dim(data_glmmLasso)[1]
ind<-sample(N,N)
kk <- 5 # 5 fold cross-validation
nk <- floor(N/kk)
Devianz_ma<-matrix(Inf,ncol=kk,nrow=length(lambda))
if(length(lambda) >1 ){
for(j in 1:length(lambda)){
print(paste("Iteration ", j,sep=""))
for (i in 1:kk)
{
if (i < kk){
indi <- ind[(i-1)*nk+(1:nk)]
} else{
indi <- ind[((i-1)*nk+1):N]
}
data_glmmLasso_train <- data_glmmLasso[-indi,]
data_glmmLasso_test <- data_glmmLasso[indi,]
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda[j],
data = data_glmmLasso_train,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
if(class(glm2)!="try-error")
{
y.hat<-predict(glm2,data_glmmLasso_test)
Devianz_ma[j,i]<-sum(family$dev.resids(data_glmmLasso_test$y,y.hat,wt=rep(1,length(y.hat))))
}
}
}
Devianz_vec<-apply(Devianz_ma,1,sum)
opt2<-which.min(Devianz_vec)
#print(Devianz_vec)
#print(paste0("optimal lambda value is ", lambda[opt2]))
lambda.min <- lambda[opt2]
} else{
lambda.min <- lambda
}
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda.min,
data = data_glmmLasso,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
list(glm2 = glm2, lambda.min = lambda.min)
}
## Code to generate simulation
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(50, 100), model = "continuous"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
alpha <- runif(Nstudies, -1, 1)
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
data <- model.matrix(~ -1 +  X*treat)
data[,-(Ncovariate+1)] <- apply(data[,-(Ncovariate+1)], 2, scale) # standardize data except treatment
meany <- alpha[studyid] + delta[studyid] * treat + data[,pf, drop = FALSE] %*% b1 + data[,Ncovariate + 1 + em, drop = FALSE] %*% b2
sigmay <- 0.5
py <- expit(meany)
if(model == "continuous"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model == "binomial"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
expit <- function(x){
exp(x)/(1+exp(x))
}
calc_mse <- function(a, b){
mean((a - b)^2)
}
find_performance <- function(val, correct_values, correct_em){
val_without_treat <- val[-length(val)]
val_treat <- val[length(val)]
c(calc_mse(val_without_treat[correct_em != 1], correct_values[correct_em != 1]),
calc_mse(val_without_treat[correct_em == 1], correct_values[correct_em == 1]),
calc_mse(val_treat, 1))
}
find_performance2 <- function(val, correct_em, continuous.cov){
val_treat <- val[length(val)]
continuous.indicator <- rep(0, length(correct_em))
continuous.indicator[continuous.cov] <- 1
val_without_treat <- val[-length(val)]
true_em_value_continuous <- val_without_treat[correct_em == 1 & continuous.indicator == 1]
true_em_value_continuous <- true_em_value_continuous[true_em_value_continuous != 0]
true_em_value_binary <- val_without_treat[correct_em == 1 & continuous.indicator == 0]
true_em_value_binary <- true_em_value_binary[true_em_value_binary != 0]
c(ifelse(length(true_em_value_continuous) == 0, NA, mean(true_em_value_continuous)),
ifelse(length(true_em_value_binary) == 0, NA, mean(true_em_value_binary)),
val_treat)
}
bootstrap_function_LASSO  <- function(model_data, ndraws) {
coeff_mtx <- matrix(0, nrow = ndraws, ncol = length(col_labels))
for (ii in 1:ndraws) {
bootstrap_ids <- sample(seq(nrow(model_data)), nrow(model_data), replace = TRUE)
bootstrap_data <- model_data[bootstrap_ids,]
bootstrap_model <- cv.glmnet(as.matrix(bootstrap_data[,-1]), as.matrix(bootstrap_data[1]), penalty.factor = p.fac, family = model.type, standardize = FALSE)
aa <- coef(bootstrap_model, s = "lambda.min")
coeff_mtx[ii,]   <- sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
}
se <- apply(coeff_mtx, 2, sd, na.rm = TRUE)
return(se)
}
bootstrap_function_glmmLasso  <- function(model_data, ndraws, lambda.min = NULL, model.type = NULL) {
if(is.null(model.type)) stop("model type missing")
coeff_mtx <- matrix(0, nrow = ndraws, ncol = length(col_labels))
for (ii in 1:ndraws) {
bootstrap_ids <- sample(seq(nrow(model_data)), nrow(model_data), replace = TRUE)
bootstrap_data <- model_data[bootstrap_ids,]
if(model.type == "gaussian"){
bootstrap_model <- cv.glmmLasso(bootstrap_data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = lambda.min, family = gaussian(link="identity"), center = FALSE, standardize = FALSE)
}
aa <- summary(bootstrap_model[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
coeff_mtx[ii,] <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(bootstrap_model[[1]])$coefficients[x,"Estimate"], 0))
}
se <- apply(coeff_mtx, 2, sd, na.rm = TRUE)
return(se)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
aa <- summary(cv.fit[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit[[1]])$coefficients[x,"Estimate"], 0))
sd_values <- bootstrap_function_glmmLasso(data, 100, cv.fit[[2]], model.type)
bootstrap_function_glmmLasso  <- function(model_data, ndraws, lambda.min = NULL, model.type = NULL) {
if(is.null(model.type)) stop("model type missing")
coeff_mtx <- matrix(0, nrow = ndraws, ncol = length(col_labels))
for (ii in 1:ndraws) {
bootstrap_ids <- sample(seq(nrow(model_data)), nrow(model_data), replace = TRUE)
bootstrap_data <- model_data[bootstrap_ids,]
if(model.type == "gaussian"){
bootstrap_model <- cv.glmmLasso(bootstrap_data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = lambda.min, family = gaussian(link="identity"))
}
aa <- summary(bootstrap_model[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
coeff_mtx[ii,] <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(bootstrap_model[[1]])$coefficients[x,"Estimate"], 0))
}
se <- apply(coeff_mtx, 2, sd, na.rm = TRUE)
return(se)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
aa <- summary(cv.fit[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit[[1]])$coefficients[x,"Estimate"], 0))
sd_values <- bootstrap_function_glmmLasso(data, 100, cv.fit[[2]], model.type)
sd_values
mean_values
niter
niter <- 5
simulation1.a <- run.simulation()
simulation1.a
b2
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + as.factor(X2) + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
cv.fit
step_full_formula <-  as.formula("y ~ (X1 + X2 + X3 + X4 + X5)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
install.packages("remotes")
remotes::install_github("timnewbold/StatisticalModels")
library(StatisticalModels)
help("GLMERSelect")
Load example data (site-level effects of land use on biodiversity from the PREDICTS database)
data(PREDICTSSiteData)
# Fit a model of log-transformed total abundance as a function of land use,
# human population density and distance to nearest road. Consider quadratic
# polynomials or simpler for the continuous effects. Do not consider
# interactions among fixed effects
m1 <- GLMERSelect(modelData = PREDICTSSites,responseVar = "LogAbund",
fitFamily = "gaussian",fixedFactors = "LandUse",
fixedTerms = list(logHPD.rs=2,logDistRd.rs=2),
randomStruct = "(1|SS)+(1|SSB)",verbose = TRUE)
m1
summary(m1)
m1$final.call
m1
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(50, 100), model = "continuous"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
alpha <- rnorm(Nstudies) #runif(Nstudies, -1, 1)
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
data <- model.matrix(~ -1 +  X*treat)
data[,-(Ncovariate+1)] <- apply(data[,-(Ncovariate+1)], 2, scale) # standardize data except treatment
meany <- alpha[studyid] + delta[studyid] * treat + data[,pf, drop = FALSE] %*% b1 + data[,Ncovariate + 1 + em, drop = FALSE] %*% b2
sigmay <- 0.5
py <- expit(meany)
if(model == "continuous"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model == "binomial"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
cv.fit
## code to do cross validation for glmmLasso to get optimal lambda value
cv.glmmLasso <- function(data_glmmLasso, form.fixed = NULL, form.rnd = NULL, lambda = NULL, family = NULL){
N <-dim(data_glmmLasso)[1]
ind<-sample(N,N)
kk <- 5 # 5 fold cross-validation
nk <- floor(N/kk)
Devianz_ma<-matrix(Inf,ncol=kk,nrow=length(lambda))
if(length(lambda) >1 ){
for(j in 1:length(lambda)){
print(paste("Iteration ", j,sep=""))
for (i in 1:kk)
{
if (i < kk){
indi <- ind[(i-1)*nk+(1:nk)]
} else{
indi <- ind[((i-1)*nk+1):N]
}
data_glmmLasso_train <- data_glmmLasso[-indi,]
data_glmmLasso_test <- data_glmmLasso[indi,]
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda[j],
data = data_glmmLasso_train,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
if(class(glm2)!="try-error")
{
y.hat<-predict(glm2,data_glmmLasso_test)
Devianz_ma[j,i]<-sum(family$dev.resids(data_glmmLasso_test$y,y.hat,wt=rep(1,length(y.hat))))
}
}
}
Devianz_vec<-apply(Devianz_ma,1,sum)
opt2<-which.min(Devianz_vec)
#print(Devianz_vec)
#print(paste0("optimal lambda value is ", lambda[opt2]))
lambda.min <- lambda[opt2]
} else{
lambda.min <- lambda
}
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda.min,
data = data_glmmLasso,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = TRUE, standardize = TRUE))
,silent=TRUE)
list(glm2 = glm2, lambda.min = lambda.min)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
colnames(data) <- gsub(":", "_", colnames(data))
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(100, 0, by = -5), family = gaussian(link="identity"))
}
## code to do cross validation for glmmLasso to get optimal lambda value
cv.glmmLasso <- function(data_glmmLasso, form.fixed = NULL, form.rnd = NULL, lambda = NULL, family = NULL){
N <-dim(data_glmmLasso)[1]
ind<-sample(N,N)
kk <- 5 # 5 fold cross-validation
nk <- floor(N/kk)
Devianz_ma<-matrix(Inf,ncol=kk,nrow=length(lambda))
if(length(lambda) >1 ){
for(j in 1:length(lambda)){
print(paste("Iteration ", j,sep=""))
for (i in 1:kk)
{
if (i < kk){
indi <- ind[(i-1)*nk+(1:nk)]
} else{
indi <- ind[((i-1)*nk+1):N]
}
data_glmmLasso_train <- data_glmmLasso[-indi,]
data_glmmLasso_test <- data_glmmLasso[indi,]
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda[j],
data = data_glmmLasso_train,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
if(class(glm2)!="try-error")
{
y.hat<-predict(glm2,data_glmmLasso_test)
Devianz_ma[j,i]<-sum(family$dev.resids(data_glmmLasso_test$y,y.hat,wt=rep(1,length(y.hat))))
}
}
}
Devianz_vec<-apply(Devianz_ma,1,sum)
opt2<-which.min(Devianz_vec)
#print(Devianz_vec)
#print(paste0("optimal lambda value is ", lambda[opt2]))
lambda.min <- lambda[opt2]
} else{
lambda.min <- lambda
}
glm2 <- try(glmmLasso(form.fixed, rnd = form.rnd,
family = family,
lambda = lambda.min,
data = data_glmmLasso,
control = list(index = c(NA, 1:((dim(data_glmmLasso)[2] - 3)), NA), center = FALSE, standardize = FALSE))
,silent=TRUE)
list(glm2 = glm2, lambda.min = lambda.min)
}
cv.fit
