# load packages needed
library(MASS) # Used for data simulation
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(dclone) # for parallel processing of JAGS code
library(knitr) # for tables
# Setting directory
setwd("C:/Users/ms19g661/Desktop")
#setwd("C:/Users/mike/Desktop")
#load/save everything else from/to github
setwd("~/GitHub/phd/varselect")
#setwd("C:/Users/mike/Desktop/Github/phd/varselect")
#source("run.simulation.R")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 3
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
# number of simulation to run
niter <- 1000
i = 1
col_labels_glmm <- c(paste0("treat:", "X", 1:5), "treat")
col_labels <- c(paste0("X", 1:5, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:5, "_treat"), "treat")
correct_em <- c(0, 0, 1, 0, 0)
correct_em_values <- c(0, 0, 0.1, 0, 0)
Nstudies <- 5
Ncovariate <- 5
continuous.cov <- c(1, 3, 4)
pf <- c(1,2,3)
em <- 3
b1 <- c(0.1, 0.5, 0.1)
b2 <- 0.1
glmm_null_formula <- as.formula("y ~ studyid + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + treat + (X1 + X2 + X3 + X4 + X5)*treat + (-1 + treat|studyid)")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + treat")
SSVS_store_mse <- bayesLASSO_store_mse <- glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_null_store_mse <- matrix(NA, nrow = niter, ncol = 3)
SSVS_store_sd <- bayesLASSO_store_sd <- step_store_sd <- glmm_full_store_sd <- glmm_null_store_sd <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lm(glmm_full_formula, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lm(glmm_full_formula, data = data)
glmm_full_formula
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lmer(glmm_full_formula, data = data)
s1 <- step(m1, scope=list(lower=~treat))
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lm(step_full_formula, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
step_full_formula <-  as.formula("y ~ (X1 + X2 + X3 + X4 + X5)*treat")
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
m1 <- lm(step_full_formula, data = data)
s1 <- step(m1, scope=list(lower=~treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
step_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
data[,paste0("X":1:5)]
data[,paste0("X",1:5)]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = data[,paste0("X",1:Ncovariate)],
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
