# load packages needed
library(MASS) # Used for data simulation
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(dclone) # for parallel processing of JAGS code
library(knitr) # for tables
library(nlme) # for initial values for glmmLasso
setwd("~/GitHub/phd/varselect")
source("run.simulation.functions.R")
source("helpful.functions.R")
# setup for parallel computing
n.cores <- 2
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
# number of simulation to run
niter <- 1000
col_labels <- c(paste0("X", 1:10, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:10, "_treat"), "treat")
correct_em <- c(0, 0, 0, 1, 1, 0, 0, 0, 0, 0)
correct_em_values <- c(0, 0, 0, 0.3, 0.5, 0, 0, 0, 0, 0)
Nstudies <- 5
Ncovariate <- 10
continuous.cov <- c(1, 2, 4, 6, 7, 8)
pf <- c(1,2,3,4,5)
em <- c(4,5)
b1 <- c(0.1, 0.1, 0.5, 0.3, 0.5)
b2 <- c(0.3, 0.5)
glmm_oracle_formula <- as.formula("y ~ studyid + X1 + X2 + X3 + X4 + X5 + X4 * treat + X5 * treat + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)*treat + (-1 + treat|studyid)")
step_full_formula <-  as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat")
model.type = "gaussian"
i =1
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_glmnet <- model.matrix(step_full_formula, data = data)
data_glmnet <- data_glmnet[,-1]
data_glmnet <- cbind(y = data$y, data_glmnet = data_glmnet)
names(data_glmnet)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_glmnet <- model.matrix(step_full_formula, data = data)
data_glmnet <- data_glmnet[,-1]
data_glmnet <- cbind(y = data$y, data_glmnet = data_glmnet)
p.fac <- c(rep(0, Nstudies - 1), rep(1, Ncovariate), 0, rep(1, Ncovariate))
family <- ifelse(model.type == "gaussian", "gaussian", "binomial")
cvfit <- cv.glmnet(as.matrix(data_glmnet[,-1]), as.matrix(data_glmnet[,1]), penalty.factor = p.fac, family = family, standardize = FALSE, type.measure = "deviance")
aa <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
sd_values <- bootstrap_function_LASSO(data_glmnet, 50, p.fac, family)
mean_values
str(data_glmnet)
names(data_glmnet)
colnames(data_glmnet)
col_labels
data_glmnet[,col_labels]
correct_em_values
correct_em
data_glmnet[,col_labels]
mean_values
data_glmnet[,col_labels] %*% mean_values
correct_em_values
find_performance3 <- function(data_subset, val, correct_values){
sum((data_subset %*% val - data_subset %*% c(correct_values, 1))^2)
}
find_performance3(data_glmnet[,col_labels], mean_values, correct_em_values)
find_performance3 <- function(data_subset, val, correct_values){
mean((data_subset %*% val - data_subset %*% c(correct_values, 1))^2)
}
find_performance3(data_glmnet[,col_labels], mean_values, correct_em_values)
find_performance <- function(val, correct_values, correct_em, data_subset){
val_without_treat <- val[-length(val)]
val_treat <- val[length(val)]
c(calc_mse(val_without_treat[correct_em != 1], correct_values[correct_em != 1]),
calc_mse(val_without_treat[correct_em == 1], correct_values[correct_em == 1]),
calc_mse(val_treat, 1),
mean((data_subset %*% val - data_subset %*% c(correct_values, 1))^2)
)
}
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_oracle_store_mse <- matrix(NA, nrow = niter, ncol = 3)
glmmLasso_store_sd <- glmnet_store_sd <- step_store_sd <- glmm_full_store_sd <- glmm_oracle_store_sd <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_oracle_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_oracle_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_oracle_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em)
glmm_oracle_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmm_oracle_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, data[,col_labels])
glmm_oracle_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmm_oracle_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
mean_values
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_oracle_store_mse <- matrix(NA, nrow = niter, ncol = 4)
glmmLasso_store_sd <- glmnet_store_sd <- step_store_sd <- glmm_full_store_sd <- glmm_oracle_store_sd <- matrix(NA, nrow = niter, ncol = 3)
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_oracle_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_oracle_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_oracle_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
glmm_oracle_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmm_oracle_store_mse
glmm_oracle_store_mse[i,]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_full_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_full_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmm_full_store_mse
glmm_full_store_mse[i,]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lm(step_full_formula, data = data)
} else if(model.type == "binary"){
m1 <- glm(step_full_formula, family = binomial(link = "logit"), data = data)
}
s1 <- step(m1, scope=list(lower=~ studyid + treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
step_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
step_store_mse[i,]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_glmnet <- model.matrix(step_full_formula, data = data)
data_glmnet <- data_glmnet[,-1]
data_glmnet <- cbind(y = data$y, data_glmnet = data_glmnet)
p.fac <- c(rep(0, Nstudies - 1), rep(1, Ncovariate), 0, rep(1, Ncovariate))
family <- ifelse(model.type == "gaussian", "gaussian", "binomial")
cvfit <- cv.glmnet(as.matrix(data_glmnet[,-1]), as.matrix(data_glmnet[,1]), penalty.factor = p.fac, family = family, standardize = FALSE, type.measure = "deviance")
aa <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
sd_values <- bootstrap_function_LASSO(data_glmnet, 50, p.fac, family)
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, data_glmnet[,col_labels])
glmnet_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmnet_store_mse[i,]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#This part is used for setting initial values
if(model.type == "gaussian"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=gaussian, data=data)
} else if(model.type == "binary"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=binomial, data=data)
}
q_start <- as.numeric(VarCorr(PQL)[1,1])
start <- as.numeric(c(PQL$coef$fixed[-which(names(PQL$coef$fixed) == "treat")], PQL$coef$fixed[which(names(PQL$coef$fixed) == "treat")], t(PQL$coef$random$studyid)))
colnames(data) <- gsub(":", "_", colnames(data)) #glmmLasso doesn't allow colon sign
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = gaussian(link = "identity"), q_start = q_start, start = start)
} else if(model.type == "binary"){
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = binomial(link = "logit"), q_start = q_start, start = start)
}
aa <- summary(cv.fit[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit[[1]])$coefficients[x,"Estimate"], 0))
# sd_values <- bootstrap_function_glmmLasso(data, 50, lambda = cv.fit[[2]], model.type, form.fixed, form.rnd, q_start = q_start , start = start)
# need to use lambda = seq(50, 0, by = -5), however, takes too long
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#This part is used for setting initial values
if(model.type == "gaussian"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=gaussian, data=data)
} else if(model.type == "binary"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=binomial, data=data)
}
q_start <- as.numeric(VarCorr(PQL)[1,1])
start <- as.numeric(c(PQL$coef$fixed[-which(names(PQL$coef$fixed) == "treat")], PQL$coef$fixed[which(names(PQL$coef$fixed) == "treat")], t(PQL$coef$random$studyid)))
colnames(data) <- gsub(":", "_", colnames(data)) #glmmLasso doesn't allow colon sign
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = gaussian(link = "identity"), q_start = q_start, start = start)
} else if(model.type == "binary"){
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = binomial(link = "logit"), q_start = q_start, start = start)
}
aa <- summary(cv.fit[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit[[1]])$coefficients[x,"Estimate"], 0))
# sd_values <- bootstrap_function_glmmLasso(data, 50, lambda = cv.fit[[2]], model.type, form.fixed, form.rnd, q_start = q_start , start = start)
# need to use lambda = seq(50, 0, by = -5), however, takes too long
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels_glmmLasso]))
#glmmLasso_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
glmmLasso_store_mse[i,]
calc_mse
glmm_oracle_store_mse_mean <- apply(glmm_oracle_store_mse, 2, mean)
glmm_oracle_store_sd_mean <- apply(glmm_oracle_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
step_store_mse_mean <- apply(step_store_mse, 2, mean)
step_store_sd_mean <- apply(step_store_sd, 2, mean, na.rm = TRUE)
glmnet_store_mse_mean <- apply(glmnet_store_mse, 2, mean)
glmnet_store_sd_mean <- apply(glmnet_store_sd, 2, mean, na.rm = TRUE)
glmmLasso_store_mse_mean <- apply(glmmLasso_store_mse, 2, mean)
glmmLasso_store_sd_mean <- apply(glmmLasso_store_sd, 2, mean, na.rm = TRUE)
result_matrix_mse <- matrix(NA, nrow = 5, ncol = 4)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse", "patient specific trt mse")
rownames(result_matrix_mse) <-  c("glmm oracle", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_mse[1,] <- glmm_oracle_store_mse_mean
result_matrix_mse[2,] <- glmm_full_store_mse_mean
result_matrix_mse[3,] <- step_store_mse_mean
result_matrix_mse[4,] <- glmnet_store_mse_mean
result_matrix_mse[5,] <- glmmLasso_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_sd) <- c("continuous EM se", "binary EM se","treatment se")
rownames(result_matrix_sd) <-  c("glmm oracle", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_sd[1,] <- glmm_oracle_store_sd_mean
result_matrix_sd[2,] <- glmm_full_store_sd_mean
result_matrix_sd[3,] <- step_store_sd_mean
result_matrix_sd[4,] <- glmnet_store_sd_mean
result_matrix_sd[5,] <- glmmLasso_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
run.simulation.modified <- function(){
glmmLasso_store_mse <- glmnet_store_mse <- step_store_mse <- glmm_full_store_mse <- glmm_oracle_store_mse <- matrix(NA, nrow = niter, ncol = 4)
glmmLasso_store_sd <- glmnet_store_sd <- step_store_sd <- glmm_full_store_sd <- glmm_oracle_store_sd <- matrix(NA, nrow = niter, ncol = 3)
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_oracle_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_oracle_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_oracle_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
glmm_oracle_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lmer(glmm_full_formula, data = data)
} else if(model.type == "binary"){
m1 <- glmer(glmm_full_formula, data = data, family = binomial(link = "logit"))
}
mean_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% names(fixef(m1)), summary(m1)$coef[x,"Std. Error"], 0))
glmm_full_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
glmm_full_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
if(model.type == "gaussian"){
m1 <- lm(step_full_formula, data = data)
} else if(model.type == "binary"){
m1 <- glm(step_full_formula, family = binomial(link = "logit"), data = data)
}
s1 <- step(m1, scope=list(lower=~ studyid + treat))
mean_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Estimate"], 0))
sd_values <- sapply(col_labels, function(x) ifelse(x %in% variable.names(s1), summary(s1)$coef[x,"Std. Error"], 0))
step_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
step_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_glmnet <- model.matrix(step_full_formula, data = data)
data_glmnet <- data_glmnet[,-1]
data_glmnet <- cbind(y = data$y, data_glmnet = data_glmnet)
p.fac <- c(rep(0, Nstudies - 1), rep(1, Ncovariate), 0, rep(1, Ncovariate))
family <- ifelse(model.type == "gaussian", "gaussian", "binomial")
cvfit <- cv.glmnet(as.matrix(data_glmnet[,-1]), as.matrix(data_glmnet[,1]), penalty.factor = p.fac, family = family, standardize = FALSE, type.measure = "deviance")
aa <- coef(cvfit, s = "lambda.min")
mean_values <-  sapply(col_labels, function(x) ifelse(x %in% rownames(aa)[aa[,1] != 0], aa[x,1], 0))
sd_values <- bootstrap_function_LASSO(data_glmnet, 50, p.fac, family)
glmnet_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, data_glmnet[,col_labels])
glmnet_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
for(i in seq(niter)){
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#This part is used for setting initial values
if(model.type == "gaussian"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=gaussian, data=data)
} else if(model.type == "binary"){
PQL <-glmmPQL(step_full_formula, random = ~ -1 + treat|studyid, family=binomial, data=data)
}
q_start <- as.numeric(VarCorr(PQL)[1,1])
start <- as.numeric(c(PQL$coef$fixed[-which(names(PQL$coef$fixed) == "treat")], PQL$coef$fixed[which(names(PQL$coef$fixed) == "treat")], t(PQL$coef$random$studyid)))
colnames(data) <- gsub(":", "_", colnames(data)) #glmmLasso doesn't allow colon sign
form.fixed <- glmmLasso_formula
form.rnd <- list(studyid =~ -1 + treat)
if(model.type == "gaussian") {
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = gaussian(link = "identity"), q_start = q_start, start = start)
} else if(model.type == "binary"){
cv.fit <- cv.glmmLasso(data, form.fixed = form.fixed, form.rnd = form.rnd, lambda = seq(50, 0, by = -5), family = binomial(link = "logit"), q_start = q_start, start = start)
}
aa <- summary(cv.fit[[1]])$coefficients
aa <- rownames(aa[aa[,"Estimate"] != 0,])
mean_values <- sapply(col_labels_glmmLasso, function(x) ifelse(x %in% aa, summary(cv.fit[[1]])$coefficients[x,"Estimate"], 0))
# sd_values <- bootstrap_function_glmmLasso(data, 50, lambda = cv.fit[[2]], model.type, form.fixed, form.rnd, q_start = q_start , start = start)
# need to use lambda = seq(50, 0, by = -5), however, takes too long
glmmLasso_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels_glmmLasso]))
#glmmLasso_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
glmm_oracle_store_mse_mean <- apply(glmm_oracle_store_mse, 2, mean)
glmm_oracle_store_sd_mean <- apply(glmm_oracle_store_sd, 2, mean, na.rm = TRUE)
glmm_full_store_mse_mean <- apply(glmm_full_store_mse, 2, mean)
glmm_full_store_sd_mean <- apply(glmm_full_store_sd, 2, mean, na.rm = TRUE)
step_store_mse_mean <- apply(step_store_mse, 2, mean)
step_store_sd_mean <- apply(step_store_sd, 2, mean, na.rm = TRUE)
glmnet_store_mse_mean <- apply(glmnet_store_mse, 2, mean)
glmnet_store_sd_mean <- apply(glmnet_store_sd, 2, mean, na.rm = TRUE)
glmmLasso_store_mse_mean <- apply(glmmLasso_store_mse, 2, mean)
glmmLasso_store_sd_mean <- apply(glmmLasso_store_sd, 2, mean, na.rm = TRUE)
result_matrix_mse <- matrix(NA, nrow = 5, ncol = 4)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse", "patient specific trt mse")
rownames(result_matrix_mse) <-  c("glmm oracle", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_mse[1,] <- glmm_oracle_store_mse_mean
result_matrix_mse[2,] <- glmm_full_store_mse_mean
result_matrix_mse[3,] <- step_store_mse_mean
result_matrix_mse[4,] <- glmnet_store_mse_mean
result_matrix_mse[5,] <- glmmLasso_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 5, ncol = 3)
colnames(result_matrix_sd) <- c("continuous EM se", "binary EM se","treatment se")
rownames(result_matrix_sd) <-  c("glmm oracle", "glmm full","naive step", "naive lasso", "glmmLasso")
result_matrix_sd[1,] <- glmm_oracle_store_sd_mean
result_matrix_sd[2,] <- glmm_full_store_sd_mean
result_matrix_sd[3,] <- step_store_sd_mean
result_matrix_sd[4,] <- glmnet_store_sd_mean
result_matrix_sd[5,] <- glmmLasso_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = data[,paste0("X",1:Ncovariate)],
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
if(model.type == "gaussian") {
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
} else if(model.type == "binary"){
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-bayesLASSO-binomial.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
}
a <- summary(samples)
g_mean <-  a$statistics[grep("g\\[", rownames(a$statistics)), "Mean"]
treat_mean <- a$statistics["d[2]", "Mean"]
names(treat_mean) <- "treat"
mean_values <- c(g_mean, treat_mean)
bayesLASSO_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
SSVS_store_mse <- bayesLASSO_store_mse <- matrix(NA, nrow = niter, ncol = 4)
SSVS_store_sd <- bayesLASSO_store_sd <- matrix(NA, nrow = niter, ncol = 3)
g_mean <-  a$statistics[grep("g\\[", rownames(a$statistics)), "Mean"]
treat_mean <- a$statistics["d[2]", "Mean"]
names(treat_mean) <- "treat"
mean_values <- c(g_mean, treat_mean)
bayesLASSO_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
bayesLASSO_store_mse[i,]
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = data[,paste0("X",1:Ncovariate)],
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
if(model.type == "gaussian") {
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-SSVS.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
} else if(model.type == "binary"){
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-SSVS-binomial.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
}
a <- summary(samples)
g_mean <-  a$statistics[grep("g\\[", rownames(a$statistics)), "Mean"]
treat_mean <- a$statistics[grep("d\\[", rownames(a$statistics)), "Mean"]
treat_mean <- treat_mean["d[2]"]
names(treat_mean) <- "treat"
mean_values <- c(g_mean, treat_mean)
SSVS_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
g_sd <-  a$statistics[grep("g\\[", rownames(a$statistics)), "SD"]
treat_sd <- a$statistics[grep("d\\[", rownames(a$statistics)), "SD"]
treat_sd <- treat_sd["d[2]"]
names(treat_sd) <- "treat"
sd_values <- c(g_sd, treat_sd)
SSVS_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
}
set.seed(i)
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data_jags <- with(data,{
list(Nstudies = length(unique(studyid)),
X = data[,paste0("X",1:Ncovariate)],
Np = length(X1),
Ncovariate = (dim(data)[2] - 3)/2,
studyid = studyid,
treat = treat + 1,
y = y)
})
if(model.type == "gaussian") {
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-SSVS.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
} else if(model.type == "binary"){
samples <- jags.parfit(cl = cl, data = data_jags, params = c("g", "d"), model = "IPD-MA-SSVS-binomial.txt", n.chains = 2, n.adapt = 100, n.update = 200, n.iter = 2000)
}
a <- summary(samples)
a
g_mean <-  a$statistics[grep("g\\[", rownames(a$statistics)), "Mean"]
treat_mean <- a$statistics[grep("d\\[", rownames(a$statistics)), "Mean"]
treat_mean <- treat_mean["d[2]"]
names(treat_mean) <- "treat"
mean_values <- c(g_mean, treat_mean)
SSVS_store_mse[i,] <- find_performance(mean_values, correct_em_values, correct_em, as.matrix(data[,col_labels]))
g_sd <-  a$statistics[grep("g\\[", rownames(a$statistics)), "SD"]
treat_sd <- a$statistics[grep("d\\[", rownames(a$statistics)), "SD"]
treat_sd <- treat_sd["d[2]"]
names(treat_sd) <- "treat"
sd_values <- c(g_sd, treat_sd)
SSVS_store_sd[i,] <- find_performance2(sd_values, correct_em, continuous.cov)
bayesLASSO_store_mse_mean <- apply(bayesLASSO_store_mse, 2, mean)
bayesLASSO_store_sd_mean <- apply(bayesLASSO_store_sd, 2, mean, na.rm = TRUE)
SSVS_store_mse_mean <- apply(SSVS_store_mse, 2, mean)
SSVS_store_sd_mean <- apply(SSVS_store_sd, 2, mean, na.rm = TRUE)
result_matrix_mse <- matrix(NA, nrow = 2, ncol = 4)
colnames(result_matrix_mse) <- c("false em mse", "true em mse","treatment mse", "patient specific trt mse")
rownames(result_matrix_mse) <-  c("bayesLASSO", "SSVS")
result_matrix_mse[1,] <- bayesLASSO_store_mse_mean
result_matrix_mse[2,] <- SSVS_store_mse_mean
result_matrix_sd <- matrix(NA, nrow = 2, ncol = 3)
colnames(result_matrix_sd) <- c("continuous EM se", "binary EM se","treatment se")
rownames(result_matrix_sd) <-  c("bayesLASSO", "SSVS")
result_matrix_sd[1,] <- bayesLASSO_store_sd_mean
result_matrix_sd[2,] <- SSVS_store_sd_mean
cbind(result_matrix_mse, result_matrix_sd)
